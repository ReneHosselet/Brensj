{"version":3,"file":"material.js","sourceRoot":"","sources":["../../../src/features/scene-graph/material.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DoubleSide, FrontSide, MeshStandardMaterial} from 'three';\n\nimport {AlphaMode, GLTF, Material as GLTFMaterial} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Material as DefaultedMaterial} from '../../three-components/gltf-instance/gltf-defaulted.js';\nimport {ALPHA_CUTOFF_BLEND, ALPHA_CUTOFF_OPAQUE} from '../../three-components/gltf-instance/ModelViewerGLTFInstance.js';\n\nimport {Material as MaterialInterface, RGB} from './api.js';\nimport {PBRMetallicRoughness} from './pbr-metallic-roughness.js';\nimport {TextureInfo, TextureUsage} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\nconst $backingThreeMaterial = Symbol('backingThreeMaterial');\nconst $applyAlphaCutoff = Symbol('applyAlphaCutoff');\n\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Material extends ThreeDOMElement implements MaterialInterface {\n  private[$pbrMetallicRoughness]: PBRMetallicRoughness;\n\n  private[$normalTexture]: TextureInfo;\n  private[$occlusionTexture]: TextureInfo;\n  private[$emissiveTexture]: TextureInfo;\n  get[$backingThreeMaterial](): MeshStandardMaterial {\n    return (this[$correlatedObjects] as Set<MeshStandardMaterial>)\n        .values()\n        .next()\n        .value;\n  }\n  constructor(\n      onUpdate: () => void, gltf: GLTF, gltfMaterial: GLTFMaterial,\n      correlatedMaterials: Set<MeshStandardMaterial>|undefined) {\n    super(onUpdate, gltfMaterial, correlatedMaterials);\n\n    if (correlatedMaterials == null) {\n      return;\n    }\n\n    if (gltfMaterial.extensions &&\n        gltfMaterial.extensions['KHR_materials_pbrSpecularGlossiness']) {\n      console.warn(`Material ${gltfMaterial.name} uses a deprecated extension\n          \"KHR_materials_pbrSpecularGlossiness\", please use\n          \"pbrMetallicRoughness\" instead. Specular Glossiness materials are\n          currently supported for rendering, but not for our scene-graph API,\n          nor for auto-generation of USDZ for Quick Look.`);\n    }\n\n\n    if (gltfMaterial.pbrMetallicRoughness == null) {\n      gltfMaterial.pbrMetallicRoughness = {};\n    }\n    this[$pbrMetallicRoughness] = new PBRMetallicRoughness(\n        onUpdate, gltf, gltfMaterial.pbrMetallicRoughness, correlatedMaterials);\n\n    if (gltfMaterial.emissiveFactor == null) {\n      gltfMaterial.emissiveFactor = [0, 0, 0];\n    }\n\n    if (gltfMaterial.doubleSided == null) {\n      gltfMaterial.doubleSided = false;\n    }\n\n    if (gltfMaterial.alphaMode == null) {\n      gltfMaterial.alphaMode = 'OPAQUE';\n    }\n\n    if (gltfMaterial.alphaCutoff == null) {\n      gltfMaterial.alphaCutoff = 0.5;\n    }\n\n    const {\n      normalTexture: gltfNormalTexture,\n      occlusionTexture: gltfOcculsionTexture,\n      emissiveTexture: gltfEmissiveTexture\n    } = gltfMaterial;\n\n    const {normalMap, aoMap, emissiveMap} =\n        correlatedMaterials.values().next().value;\n\n    this[$normalTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Normal,\n        normalMap,\n        correlatedMaterials,\n        gltf,\n        gltfNormalTexture ? gltfNormalTexture : null,\n    );\n\n    this[$occlusionTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Occlusion,\n        aoMap,\n        correlatedMaterials,\n        gltf,\n        gltfOcculsionTexture ? gltfOcculsionTexture : null,\n    );\n\n    this[$emissiveTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Emissive,\n        emissiveMap,\n        correlatedMaterials,\n        gltf,\n        gltfEmissiveTexture ? gltfEmissiveTexture : null,\n    );\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as any).name || '';\n  }\n\n  get pbrMetallicRoughness(): PBRMetallicRoughness {\n    return this[$pbrMetallicRoughness];\n  }\n\n  get normalTexture(): TextureInfo {\n    return this[$normalTexture];\n  }\n\n  get occlusionTexture(): TextureInfo {\n    return this[$occlusionTexture];\n  }\n\n  get emissiveTexture(): TextureInfo {\n    return this[$emissiveTexture];\n  }\n\n  get emissiveFactor(): RGB {\n    return (this[$sourceObject] as DefaultedMaterial).emissiveFactor;\n  }\n\n  setEmissiveFactor(rgb: RGB) {\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      material.emissive.fromArray(rgb);\n    }\n    (this[$sourceObject] as DefaultedMaterial).emissiveFactor = rgb;\n    this[$onUpdate]();\n  }\n\n  [$applyAlphaCutoff]() {\n    const gltfMaterial = this[$sourceObject] as DefaultedMaterial;\n    // 0.0001 is the minimum in order to keep from using zero, which disables\n    // masking in three.js. It's also small enough to be less than the smallest\n    // normalized 8-bit value.\n    const cutoff = gltfMaterial.alphaMode === 'OPAQUE' ?\n        ALPHA_CUTOFF_OPAQUE :\n        (gltfMaterial.alphaMode === 'BLEND' ?\n             ALPHA_CUTOFF_BLEND :\n             Math.max(0.0001, Math.min(1.0, gltfMaterial.alphaCutoff)));\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      material.alphaTest = cutoff;\n      material.needsUpdate = true;\n    }\n  }\n\n  setAlphaCutoff(cutoff: number): void {\n    (this[$sourceObject] as DefaultedMaterial).alphaCutoff = cutoff;\n    this[$applyAlphaCutoff]();\n    this[$onUpdate]();\n  }\n\n  getAlphaCutoff(): number {\n    return (this[$sourceObject] as DefaultedMaterial).alphaCutoff;\n  }\n\n  setDoubleSided(doubleSided: boolean): void {\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      // When double-sided is disabled gltf spec dictates that Back-Face culling\n      // must be disabled, in three.js parlance that would mean FrontSide\n      // rendering only.\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#double-sided\n      material.side = doubleSided ? DoubleSide : FrontSide;\n      material.needsUpdate = true;\n    }\n    (this[$sourceObject] as DefaultedMaterial).doubleSided = doubleSided;\n    this[$onUpdate]();\n  }\n\n  getDoubleSided(): boolean {\n    return (this[$sourceObject] as DefaultedMaterial).doubleSided;\n  }\n\n  setAlphaMode(alphaMode: AlphaMode): void {\n    const enableTransparency =\n        (material: MeshStandardMaterial, enabled: boolean): void => {\n          material.transparent = enabled;\n          material.depthWrite = !enabled;\n        };\n\n    (this[$sourceObject] as DefaultedMaterial).alphaMode = alphaMode;\n\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      enableTransparency(material, alphaMode !== 'OPAQUE');\n      this[$applyAlphaCutoff]();\n      material.needsUpdate = true;\n    }\n\n    this[$onUpdate]();\n  }\n\n  getAlphaMode(): AlphaMode {\n    return (this[$sourceObject] as DefaultedMaterial).alphaMode;\n  }\n}\n"]}